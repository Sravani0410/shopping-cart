CRUD-Operation--> app name

app structure i follow:
src
    data
      |----siteData.ts
    layouts
       |----BaseLayout.astro
    pages
       |----api
       |     |--[id].json.ts
       |     |--addLink.json.ts
       |     |--getLink.json.ts
       |----edit
       |      |---[id].astro
       |----link
       |      |---[id].astro
       |----add.astro
       |----index.astro
    types
       |---Links.ts
    env.d.ts
astro.config.mjs
db.json
tailwind.config.mjs
tsconfig.json

i will provide the code:

1.src/data/siteData.ts:
   ====================
   export const metaData={
    title:"Dev Links",
    description:"Save links you find on the web for web developer"
}  

2.src/layouts/BaseLayout.astro:
===============================
---
import { metaData } from "../data/siteData";
const {title=metaData.title,description=metaData.description}=Astro.props;
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
        <meta name="description" content={description} />
		<title>{title}</title>
	</head>
	<body class="grid gap-6">
        <nav class="container flex justify-between items-center py-4">
            <a class="text-blue-400 underline" href="/">Go Home</a>
            <a class="text-blue-400 underline" href="add">add</a>
			<div class="icon-cart">
                <svg class="w-6 h-6 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none" viewBox="0 0 24 24">
					<path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 4h1.5L9 16m0 0h8m-8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm8 0a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm-8.5-3h9.25L19 7H7.312"/>
				  </svg>
				  
                <span>0</span>
            </div>
        </nav>
        <main class="container grid gap-6">
            <slot/>
        </main>
	</body>
</html>


3.src/pages/api/[id].json.ts:
============================
import type { APIRoute } from "astro"

export const DELETE: APIRoute =async ({ params,redirect }) => {
    const id=params.id;
    console.log(id,"id===>")
    const res=await fetch(`http://localhost:3000/link/${id}`,{
      method:"DELETE"
    })
    console.log(res,"res===>")
    if(res.ok){
      // return redirect(Astro.url.origin,307)
    }
    return new Response(JSON.stringify({
        message: "error",
        success:false,

      }),
      {status:404}
    )
  }


export const updateLink: APIRoute = async ({ params, request }) => {
  const { id } = params;
  const linkData = await request.json();

  if (!linkData.isRead) {
    linkData.isRead = false;
  }

  if (linkData.rating === "") {
    linkData.rating = null;
  }

  try {
    const response = await fetch(`http://localhost:3000/link/${id}`, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(linkData),
    });

    if (!response.ok) {
      throw new Error("Failed to update link in the database");
    }

    const updatedLink = await response.json();

    return new Response(JSON.stringify({ data: updatedLink, success: true }), {
      status: 200,
    });
  } catch (error) {
    console.error(error);
    return new Response(
      JSON.stringify({ message: error, success: false }),
      { status: 500 }
    );
  }
};


4.src/pages/api/addLink.json.ts:
===============================
import type { APIRoute } from "astro";

export const POST: APIRoute = async ({ request }) => {
  const data = await request.json();
  if (!data.isRead) {
    data.isRead = false;
  }
  if (data.rating === "") {
    data.rating = null;
  }

  try {
    const res = await fetch("http://localhost:3000/links", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });
    if (!res.ok) {
      throw new Error("There was a Problem with db connection");
    }
    const dbRes = await res.json();
    // console.log("dbRes",dbRes)
    if (dbRes.id) {
      return new Response(
        JSON.stringify({ message: "success", success: true }),{
            status:200
        }
      );
    }
    else{
        throw new Error("There was a Problem with db response");
    }
  } catch (err) {
    console.log(err);
    return new Response(JSON.stringify({ message: err, success: false }), {
      status: 404,
    });
  }
  return new Response(
    JSON.stringify({
      message: "This was a POST!",
    })
  );
};

5.src/pages/api/getLink.json.ts:
===============================
import type { APIRoute } from "astro"

export const GET: APIRoute = async({ params, request }) => {
    
    const url = new URL(request.url);
    const id= url.searchParams.get("id");
    // console.log("id",id)
    // if we have id,then grab a single resource
    if(id){
        try {
            const res = await fetch(`http://localhost:3000/links/${id}`, {
              method: "GET",
              headers: {
                "Content-Type": "application/json",
              },
            });
            if (!res.ok) {
              throw new Error("There was a Problem with db connection");
            }
            const dbRes = await res.json();
            console.log("dbRes",dbRes)
            if (dbRes.id) {
              return new Response(
                JSON.stringify({ data: dbRes, success: true }),{
                    status:200
                }
              );
            }
            else{
                throw new Error("There was a Problem with db response");
            }
          } catch (err) {
            console.log(err);
            return new Response(JSON.stringify({ data: err, success: false }), {
              status: 404,
            });
          }
    }
    try {
        const res = await fetch(`http://localhost:3000/links`, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        });
        if (!res.ok) {
          throw new Error("There was a Problem with db connection");
        }
        const dbRes = await res.json();
        // console.log("dbRes",dbRes)
        if (dbRes.length) {
          return new Response(
            JSON.stringify({ data: dbRes, success: true }),{
                status:200
            }
          );
        }
        else{
            throw new Error("There was a Problem with db response");
        }
      } catch (err) {
        console.log(err);
        return new Response(JSON.stringify({ data: err, success: false }), {
          status: 404,
        });
      }
}

6.src/pages/edit/[id].astro:
===========================
---
import BaseLayout from "@/layouts/BaseLayout.astro";
import type { Links } from "@/types/Links";

const { id } = Astro.params;
// console.log("id",id)
const req = await fetch(`${Astro.url.origin}/api/getLink.json?id=${id}`);
if (!req.ok) {
  return Astro.redirect("/");
}
const { data }: { data: Links } = await req.json();
// console.log("data111======>",data)
if (!data) {
  return Astro.redirect("/");
}
---
<BaseLayout>
  <div class="w-full max-w-sm p-4 bg-white border border-gray-200 rounded-lg shadow sm:p-6 md:p-8 dark:bg-gray-800 dark:border-gray-700 items-center">
    <form id="add-form" class="space-y-6">
      <div>
        <label for="name" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Name</label>
        <input required type="text" name="name" id="name" value={data.name} class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"/>
      </div>
      <div>
        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Description</label>
        <textarea required name="description" maxlength="160" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500">{data.description}
        </textarea>
      </div>
      <div>
        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white" for="user_avatar">Upload file</label>
        <input class="block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 dark:text-gray-400 focus:outline-none dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400" aria-describedby="user_avatar_help" id="user_avatar" type="file">
      </div>
      <div>
        <label for="rating" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Price</label>
        <input required type="number" value={data.price} name="price" id="price"  class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"/>
      </div>
      <button class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
        Add Product
      </button>
    </form>
  </div>
</BaseLayout>

<script
  define:vars={{
    id,
  }}
>
  const addForm = document.querySelector("#add-form");
  addForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(addForm);
    //   return console.log(Object.fromEntries(formData))
    const values = Object.fromEntries(formData);
    // todo : santize these inputs

    try {
      const res = await fetch(`/api/${id}.json`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(values),
      });
      const { success, message } = await res.json();
      if (success) {
        console.log(message);
        // todo :toast
        addForm.reset();
        // todo: add and view
        // if((e.target as HTMLButtonElement).dataset.view){
        // console.log("hi")
        // }
      } else {
        throw new Error(message);
      }
    } catch (err) {
      console.log(err);
    }
  });
</script>

7.src/pages/link/[id].astro:
===========================
---
import BaseLayout from "@/layouts/BaseLayout.astro";
import type { Links } from "@/types/Links";

const {id}=Astro.params;
// console.log("id",id)
if(!id){
 return Astro.redirect("/")
}
const req = await fetch(`${Astro.url.origin}/api/getLink.json?id=${id}`);
if(!req.ok){
  return Astro.redirect("/")
}
const  {data}:{data:Links} = await req.json();
// console.log("data111======>",data)
if(!data){
 return Astro.redirect("/")
}
---
<BaseLayout>
  <div class="flex gap-2">
      <button type="submit" class="bg-red-400 text-white py-2 px-6" id="delete">Delete Link</button>
    <a class="bg-teal-500 text-white py-2 px-6" href={`/edit/${data._id}`}>Edit Link</a>

  </div>
    <ul>
      <li>{data.name}</li>
      <li>{data.description}</li>
      <li>{data.price}</li>
    </ul>
    <script define:vars={
      {
        id:data.id,
      }
    }>
      const deleteBtn=document.querySelector("#delete");
      deleteBtn.addEventListener("click",async(e)=>{
        e.preventDefault();
      try {
        const res = await fetch(`/api/${id}.json`, {
          method: "DELETE",
        });
        const { success, message } = await res.json();
        if (success) {
          console.log(message);
          window.location.href = "/";
        } else {
          throw new Error(message);
        }
      } catch (err) {
        console.log(err);
      }
      })
    </script>
</BaseLayout>

8.src/pages/add.astro:
=====================
---
import BaseLayout from "@/layouts/BaseLayout.astro";
---

<BaseLayout>
  <div class="w-full max-w-sm p-4 bg-white border border-gray-200 rounded-lg shadow sm:p-6 md:p-8 dark:bg-gray-800 dark:border-gray-700 items-center">
    <form id="add-form" class="space-y-6">
      <div>
        <label for="name" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Name</label>
        <input required type="text" name="name" id="name" class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"/>
      </div>
      <div>
        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Description</label>
        <textarea required name="description" maxlength="160" class="block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"></textarea>
      </div>
      <div>
        <label class="block mb-2 text-sm font-medium text-gray-900 dark:text-white" for="user_avatar">Upload file</label>
        <input class="block w-full text-sm text-gray-900 border border-gray-300 rounded-lg cursor-pointer bg-gray-50 dark:text-gray-400 focus:outline-none dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400" aria-describedby="user_avatar_help" id="user_avatar" type="file">
      </div>
      <div>
        <label for="rating" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Price</label>
        <input required type="number" name="price" id="price"  class="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white"/>
      </div>
      <button class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
        Add Product
      </button>
    </form>
  </div>
</BaseLayout>

<script>
  const addForm = document.querySelector("#add-form") as HTMLFormElement;
  addForm.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(addForm);
    //   return console.log(Object.fromEntries(formData))
    const values = Object.fromEntries(formData);
    // todo : santize these inputs
   
    try {
      const res = await fetch("/api/addLink.json", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(values),
      });
      const { success , message}=await res.json();
      if(success){
        console.log(message);
        // todo :toast
        addForm.reset();
        // todo: add and view
        // if((e.target as HTMLButtonElement).dataset.view){
        // console.log("hi")
        // }
      }
      else{
        throw new Error(message);
      }
    } catch (err) {
      console.log(err);
    }
  });
</script>

9.src/pages/index.astro:
=======================
---
import BaseLayout from "@/layouts/BaseLayout.astro";
import type { Links } from "@/types/Links";
// import BaseLayout from "../layouts/BaseLayout.astro";
const req = await fetch(`${Astro.url.origin}/api/getLink.json`);
const { data } = await req.json();
console.log("data===>",data)
---

<BaseLayout>
  <ul>
    {
      data.length>0 ?( <div class="md:col-span-1 md:flex md:flex-col md:overflow-auto">
          <ul class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 xl:gap-8 overflow-auto flex-grow">
            {data.map((link: Links) => (
              <li class="group bg-white p-4 rounded-lg shadow border border-gray-200 dark:bg-gray-800 dark:border-gray-700">
                <h3 class="mt-4 text-sm text-gray-700">{link.name}</h3>
                {link.image && (
                  <img
                    src={link.image}
                    alt={link.name}
                    class="w-20 h-20 rounded"
                  />
                )}
                <p>{link.description}</p>
                <p>{link.price}</p>
                <div class="container flex justify-between items-center py-4">
                  <button class="edit_btn">Edit</button>
                  {/* <a class="bg-teal-500 text-white py-2 px-6" href={`/edit/${link._id}`}>Edit</a> */}
                   {/* <a href={`/api/${link._id}.json`}>Delete</a> */}
                   <a href={`/link/${link._id}`}>Delete</a>
                   {/* <button type="submit" class="bg-red-400 text-white py-2 px-6" id="delete">Delete Link</button> */}
                  {/* <button>Delete</button> */}
                </div>
                <button>Add to Cart</button>

                {/* <a class="underline text-blue-500" href={`/link/${link._id}`}>
              View Details
            </a> */}
              </li>
            ))}
          </ul>
        </div>):(
        <li>No data</li>
      )
    }
  </ul>
</BaseLayout>

10.src/types/Links.ts:
=====================
export type Links = {
    _id: string;
    name: string;
    price: number; // Optional price field
    description: string;
    image?: string; // Optional image field
};

11.src/env.d.ts:
================
/// <reference types="astro/client" />

12.astro.config.mjs:
====================
import { defineConfig } from 'astro/config';

import netlify from "@astrojs/netlify";
import react from "@astrojs/react";
import tailwind from "@astrojs/tailwind";

// https://astro.build/config
export default defineConfig({
  output: "server",
  adapter: netlify(),
  integrations: [react(), tailwind()]
});

13.db.json:
==========
{
    "links":[
        //having data
    ]
}
14.tailwind.config.mjs:
========================
/** @type {import('tailwindcss').Config} */
export default {
	content: ['./src/**/*.{astro,html,js,jsx,md,mdx,svelte,ts,tsx,vue}'],
	theme: {
		extend: {
			container:{
				center:true,
				padding:"1.5rem",
			}
		},
	},
	plugins: [
		require('@tailwindcss/forms')
	],
}
15.tsconfig.json:
=================
{
  "extends": "astro/tsconfigs/strict",
  "compilerOptions": {
    "jsx": "react-jsx",
    "jsxImportSource": "react",
    "baseUrl":".",
    "paths":{
      "@/*":["src/*"],
    }
  }
}
so i giving all code. in that i'm having issuses : 
1.edit ,delete fucntionality is not working properly--> using db.json
2. actually my main aim is using real api's. i created the api's 
   using those api's i have to fetch and use and apply the functionliaty CRUD
   for that i will provide the api's:
  get--> https://shopping-cart-backend-three.vercel.app/api/products
  post-->https://shopping-cart-backend-three.vercel.app/api/products
  put--> https://shopping-cart-backend-three.vercel.app/api/products/:id
  delete-->https://shopping-cart-backend-three.vercel.app/api/products/:id
use these api's and modify the code accordinly 
note: here i'm using see link something else but backend fields Already "_id": "6672c43a2cafd60d3047c4ac",
    {
    "name": "Product Name",
    "price": 100,
    "description": "Product Description"
    }
    change the fields also
    if possible i need one more field is image it will optional

