---
import BaseLayout from "@/layouts/BaseLayout.astro";
import type { Links } from "@/types/Links";
import { metaData } from "../data/siteData";
const { id } = Astro.params;

const fetchLinks = async () => {
  try {
    const res = await fetch(
      "https://shopping-cart-backend-three.vercel.app/api/products"
    );

    if (!res.ok) {
      throw new Error("Error fetching links");
    }

    const data = await res.json();
    return data;
  } catch (err) {
    console.error("Error fetching links:", err);
    return [];
  }
};

const data = await fetchLinks();
---

<BaseLayout>
  <div
  class="p-1 bg-white rounded-lg  dark:bg-gray-800 dark:border-gray-700"  >
    <div>
      {
        data && (
          <div class="md:col-span-1 md:flex md:flex-col md:overflow-auto items-center justify-center">
            <ul class="grid grid-cols-1 gap-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3 xl:gap-6 flex-grow">
              {data.map((link: Links) => (
                <li class="flex flex-col items-center bg-gray-100 border border-gray-200 rounded-lg shadow md:flex-row md:max-w-xl hover:bg-white dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700">        
                  <img class="object-cover w-full bg-gray-100 border-gray-200 hover:bg-white rounded-t-lg h-96 md:h-auto md:w-48 md:rounded-none md:rounded-s-lg" src="/image.jpg" alt="dummy-image" />
                  <div class="p-2 flex flex-col justify-between items-center">
                    <h5 class="mb-2 text-2xl font-bold tracking-tight text-gray-900 dark:text-white">
                    {link.name}
                  </h5>
                  {link.image && (
                    <img
                      src={link.image}
                      alt={link.name}
                      class="w-20 h-20 rounded"
                    />
                  )}
                  {/* <img src={dummyimage}/> */}
                  <p class="mb-3 font-normal text-gray-700 dark:text-gray-400">{link.description}</p>
                  <p class="mb-3 font-semibold text-gray-700  dark:text-gray-400">â‚¹{link.price}</p>
                  <div class="flex justify-between items-center py-2">
                    <a
                      class="focus:outline-none text-white bg-green-400 hover:bg-green-800 focus:ring-4 focus:ring-green-400 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-green-400 dark:hover:bg-green-700 dark:focus:ring-green-400"
                      href={`/edit/${link._id}`}
                    >
                      Edit
                    </a>
                    <button
                      type="submit"
                      class="focus:outline-none text-white bg-red-400 hover:bg-red-800 focus:ring-4 focus:ring-red-400 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-red-400 dark:hover:bg-red-700 dark:focus:ring-red-400"
                      data-id={link._id}
                    >
                      Delete
                    </button>
                  </div>
                  {/* <a class="focus:outline-none text-white bg-blue-500 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800" href={`/cart/${link._id}`}>Add To Cart</a> */}
                  <button
                    class="focus:outline-none text-white bg-blue-500 hover:bg-blue-800 focus:ring-4 focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 me-2 mb-2 items-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
                    onclick={`(async () => {
                      try {
                        const res = await fetch('/api/cartLink.json', {
                          method: 'POST',
                          headers: {
                            'Content-Type': 'application/json',
                          },
                          body: JSON.stringify({ productId: '${link._id}', quantity: 1 }),
                        });

                        if (res.ok) {
                          window.location.href = '/cart/' + '${link._id}';
                        } else {
                          throw new Error('Failed to add item to cart');
                        }
                      } catch (err) {
                        console.error(err);
                      }
                    })();`}
                  >
                    Add To Cart
                  </button>
                  </div>
                  
                </li>
              ))}
            </ul>
          </div>
        )
      }
    </div>
  </div>
</BaseLayout>
<script define:vars={{ id }}>
  document.addEventListener("DOMContentLoaded", () => {
    const deleteProduct = async (id) => {
      try {
        const res = await fetch(`/api/${id}.json`, {
          method: "DELETE",
        });

        if (!res.ok) {
          throw new Error("Failed to delete the product");
        }

        const result = await res.json();
        if (result.success) {
          window.location.href = "/";
        } else {
          throw new Error(result.message);
        }
      } catch (err) {
        console.error("Error deleting product:", err);
      }
    };

    const deleteButtons = document.querySelectorAll("button[data-id]");
    deleteButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const id = button.getAttribute("data-id");
        deleteProduct(id);
      });
    });
  });
</script>
